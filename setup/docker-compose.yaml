version: '3.8'

services:
  # üß© Zookeeper - Coordination service required by Kafka brokers for cluster metadata and leader election
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # ü¶ú Kafka Broker 1 - Core message broker for event streaming (part of 3-node Kafka cluster)
  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - ./config/kafka1.properties:/etc/kafka/server.properties
    command: ["sh", "-c", "exec kafka-server-start /etc/kafka/server.properties"]

  # ü¶ú Kafka Broker 2 - Second broker to ensure replication and high availability
  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    volumes:
      - ./config/kafka2.properties:/etc/kafka/server.properties
    command: ["sh", "-c", "exec kafka-server-start /etc/kafka/server.properties"]

  # ü¶ú Kafka Broker 3 - Third broker completing the Kafka cluster quorum
  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    volumes:
      - ./config/kafka3.properties:/etc/kafka/server.properties
    command: ["sh", "-c", "exec kafka-server-start /etc/kafka/server.properties"]

  # üìú Schema Registry - Stores and validates Avro/JSON schemas for Kafka message compatibility
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094"

  # üì° OpenTelemetry Collector - Collects traces and metrics from microservices and forwards to Tempo/Prometheus
  otel-collector:
    image: otel/opentelemetry-collector:0.103.1
    container_name: otel-collector
    restart: unless-stopped
    volumes:
      - ./otel-collector/config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317"  # OTLP gRPC receiver
      - "4318:4318"  # OTLP HTTP receiver
    command: ["--config=/etc/otelcol/config.yaml"]

  # üìà Prometheus - Time-series metrics database for scraping service metrics and storing telemetry
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../observability/prometheus-alerts.yml:/etc/prometheus/alerts/prometheus-alerts.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"

  # üìä Grafana - Visualization and dashboarding tool for Prometheus metrics and Tempo traces
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning/datasources/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./grafana/provisioning/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ../observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"

  # üîç Jaeger - Lightweight distributed tracing UI for viewing spans from OTEL and Tempo
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"   # Jaeger Web UI
      - "14268:14268"   # Collector HTTP
      - "14250:14250"   # Collector gRPC

  # ‚è±Ô∏è Tempo - Distributed tracing backend to store and query trace data (connected to OTEL & Grafana)
  tempo:
    image: grafana/tempo:2.6.0
    container_name: tempo
    restart: unless-stopped
    volumes:
      - ./tempo/config.yaml:/etc/tempo/config.yaml:ro
    command: ["-config.file=/etc/tempo/config.yaml"]
    ports:
      - "3200:3200"   # Tempo HTTP API (used by Grafana Tempo datasource)

  # ‚ö° Redis - In-memory data store used for caching and rate-limiting in gateway services
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]



#  discovery-service:
#    build: ../discoveryService
#    container_name: discovery-service
#    environment:
#      - MANAGEMENT_OTLP_TRACING_ENDPOINT=http://otel-collector:4318/v1/traces
#    ports:
#      - "8761:8761"
#    depends_on:
#      - otel-collector
#
#  config-service:
#    build: ../configService
#    container_name: config-service
#    environment:
#      - MANAGEMENT_OTLP_TRACING_ENDPOINT=http://otel-collector:4318/v1/traces
#      - SPRING_PROFILES_ACTIVE=native
#    ports:
#      - "8888:8888"
#    depends_on:
#      - discovery-service
#      - otel-collector

#  order-service:
#    build: ../reactiveOrderService
#    container_name: order-service
#    environment:
#      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-service:8888
#      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka
#      - MANAGEMENT_OTLP_TRACING_ENDPOINT=http://otel-collector:4318/v1/traces
#    ports:
#      - "8080:8080"
#    depends_on:
#      - config-service
#      - discovery-service
#      - otel-collector
#      - kafka1

#  customer-service:
#    build: ../customerService
#    container_name: customer-service
#    environment:
#      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-service:8888
#      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka
#      - MANAGEMENT_OTLP_TRACING_ENDPOINT=http://otel-collector:4318/v1/traces
#      - APP_ORDER-SERVICE_BASE-URL=http://order-service
#    ports:
#      - "8081:8081"
#    depends_on:
#      - order-service
#      - config-service
#      - discovery-service
#      - otel-collector

#  gateway-service:
#    build: ../gatewayService
#    container_name: gateway-service
#    environment:
#      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-service:8888
#      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka
#      - MANAGEMENT_OTLP_TRACING_ENDPOINT=http://otel-collector:4318/v1/traces
#    ports:
#      - "8085:8085"
#    depends_on:
#      - customer-service
#      - order-service
#      - discovery-service
#      - config-service
#      - otel-collector
