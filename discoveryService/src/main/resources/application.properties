spring.application.name=discovery-service
spring.config.import=optional:configserver:http://localhost:8888
server.port=8761

# =========================================
# ? Kafka Configuration (for Spring Cloud Bus)
# =========================================
# Comma-separated list of Kafka brokers.
# Used by Spring Cloud Bus to distribute configuration refresh events
# across all microservices in the architecture.
spring.cloud.stream.kafka.binder.brokers=192.168.0.143:9092,192.168.0.143:9093,192.168.0.143:9094

# =========================================
# ? Spring Cloud Bus (Kafka Integration)
# =========================================
# Enables Spring Cloud Bus, which propagates configuration refresh events across all
# microservices connected to the Config Server using Kafka as the transport layer.
spring.cloud.bus.enabled=true

# Ensures that refresh events (e.g., triggered by /actuator/busrefresh)
# are automatically handled and distributed across the system.
spring.cloud.bus.refresh.enabled=true


# =========================================
# ? Kafka Topics for Config Refresh Events
# =========================================
# Defines the Kafka topic used to broadcast configuration change events.
# Both input and output bindings use the same topic for simplicity.
spring.cloud.stream.bindings.springCloudBusOutput.destination=config-bus-topic
spring.cloud.stream.bindings.springCloudBusInput.destination=config-bus-topic

# =========================================
# ? Logging Configuration
# =========================================
# Custom console log pattern for colorized output and detailed tracing.
# Shows timestamp, log level, thread name, class, method, and message.
logging.pattern.console=${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%class.%M:%L) - %msg%n}