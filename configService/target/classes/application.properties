# =========================================
# ?? Core Server & Application Info
# =========================================
# Logical name of this service.
# Other microservices use this name (config-service) to fetch their configurations
# from the Config Server via:
#   spring.config.import=optional:configserver:http://localhost:8888
spring.application.name=config-service

# Port on which the Config Server runs.
# This must stay local so that the server can start before fetching any remote configuration.
server.port=8888


# =========================================
# ?? Git Configuration Repository
# =========================================
# The remote Git repository containing all configuration files for your microservices.
# Each service (gateway-service, discovery-service, customer-service, etc.)
# will have its own {service-name}.properties or {service-name}.yml file inside this repo.
#
# ?? Important: This section MUST remain local ? the Config Server cannot fetch its own repo details from itself.
spring.cloud.config.server.git.uri=https://github.com/justamitsaha/configurationServer.git

# Clone the Git repository when the Config Server starts up.
spring.cloud.config.server.git.clone-on-start=true

# Default branch to use when fetching configurations.
spring.cloud.config.server.git.default-label=main


# =========================================
# ? Local Fallback Profile (Native Mode)
# =========================================
# Enables the 'native' profile, allowing the Config Server to read configs directly from the classpath.
# This is useful during local development or when Git is temporarily unavailable.
spring.profiles.active=native

# Directory where local configuration files are stored when using native mode.
# The Config Server will search inside this folder for service configuration files.
spring.cloud.config.server.native.searchLocations=classpath:/config


# =========================================
# ? Spring Cloud Bus (Kafka Integration)
# =========================================
# Enables Spring Cloud Bus, which propagates configuration refresh events across all
# microservices connected to the Config Server using Kafka as the transport layer.
spring.cloud.bus.enabled=true

# Ensures that refresh events (e.g., triggered by /actuator/busrefresh)
# are automatically handled and distributed across the system.
spring.cloud.bus.refresh.enabled=true


# =========================================
# ? Kafka Topics for Config Refresh Events
# =========================================
# Defines the Kafka topic used to broadcast configuration change events.
# Both input and output bindings use the same topic for simplicity.
spring.cloud.stream.bindings.springCloudBusOutput.destination=config-bus-topic
spring.cloud.stream.bindings.springCloudBusInput.destination=config-bus-topic

# ? How It Works:
# - When you POST to /actuator/busrefresh on the Config Server,
#   it publishes a "RefreshRemoteApplicationEvent" to this Kafka topic.
# - All other microservices connected to the same topic receive the event
#   and automatically refresh their configuration via /actuator/refresh.


# =========================================
# ? Kafka Broker Connection (for Spring Cloud Bus)
# =========================================
# Comma-separated list of Kafka brokers forming the cluster.
# These brokers handle Spring Cloud Bus messages (config refresh broadcasts).
spring.cloud.stream.kafka.binder.brokers=192.168.0.143:9092,192.168.0.143:9093,192.168.0.143:9094

# Uncomment the following line for local development environments.
# This allows Kafka to automatically create topics (like config-bus-topic) if they don?t already exist.
# spring.cloud.stream.kafka.binder.auto-create-topics=true

# ? Topic Creation Details:
# - In most local setups, Kafka auto-creates topics on first publish.
# - In production, if `auto.create.topics.enable=false`, create manually using:
#   kafka-topics.sh --create --topic config-bus-topic --partitions 3 --replication-factor 1 --bootstrap-server 192.168.0.143:9092


# =========================================
# ?? Management & Actuator Configuration
# =========================================
# Exposes operational endpoints for monitoring and management.
# - health:       Shows service health
# - info:         Shows build and metadata
# - refresh:      Manually reloads configuration
# - busrefresh:   Broadcasts refresh events across all connected services
management.endpoints.web.exposure.include=busrefresh,refresh,health,info

# =========================================
# ? Kafka Observability (Micrometer Integration)
# =========================================
# Enables Micrometer to expose Kafka client metrics via Actuator endpoints.
# This is separate from Spring Cloud Bus messaging itself.
# Useful for monitoring producer/consumer latency, lag, and record throughput.
management.kafka.bootstrap-servers=192.168.0.143:9092,192.168.0.143:9093,192.168.0.143:9094


# Show detailed component health info (e.g., Kafka, Git repo, Bus status)
management.endpoint.health.show-details=always


# =========================================
# ? Distributed Tracing (OpenTelemetry)
# =========================================
# Sampling probability for distributed tracing.
# 1.0 = trace every request (recommended for development)
# Use lower values in production (e.g., 0.1 = 10% sampling).
management.tracing.sampling.probability=1.0

# OTLP endpoint where the Config Server exports trace spans. Does not use topic
# This collector (e.g., OpenTelemetry Collector, Grafana Agent, or Jaeger) processes tracing data.
management.otlp.tracing.endpoint=http://192.168.0.190:4318/v1/traces


# =========================================
# ? Logging Configuration
# =========================================
# Custom console log pattern for colorized, readable, and structured logging.
# Includes timestamp, level, thread, class, method, and message.
logging.pattern.console=${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%class.%M:%L) - %msg%n}


# =========================================
# ? Optional: Manually Trigger Config Refresh via Bus
# =========================================
# You can trigger a live configuration refresh event for all connected microservices using:
#   POST http://localhost:8888/actuator/busrefresh
#
# This will publish a message to the `config-bus-topic` Kafka topic, notifying all clients to refresh.
#
# ? Note:
#   - Each service must have Spring Cloud Bus and Kafka correctly configured.
#   - This ensures distributed, zero-downtime configuration updates across all running services.
