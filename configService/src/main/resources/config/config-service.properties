# =========================================
# ?? Spring Cloud Bus (Kafka Integration)
# =========================================
# Enables Spring Cloud Bus - a lightweight message broker mechanism propagates configuration changes across
# all microservices connected to the Config Server via Kafka.
spring.cloud.bus.enabled=true

# Ensures that Spring Cloud Bus refresh events (e.g., /busrefresh) are handled automatically when triggered.
spring.cloud.bus.refresh.enabled=true


# =========================================
# ? Kafka Topics for Config Refresh Events
# =========================================
# Defines Kafka topic to publish config refresh events. Both input/output bindings use same topic for simplicity.
spring.cloud.stream.bindings.springCloudBusOutput.destination=config-bus-topic
spring.cloud.stream.bindings.springCloudBusInput.destination=config-bus-topic


# =========================================
# ? Kafka Broker Connection
# =========================================
# Comma-separated list of Kafka brokers in your cluster.
# These brokers handle communication for Spring Cloud Bus refresh events.
spring.cloud.stream.kafka.binder.brokers=192.168.0.143:9092,192.168.0.143:9093,192.168.0.143:9094

# Uncomment the following line during local development to allow Spring to auto-create Kafka topics that don't exist.
# spring.cloud.stream.kafka.binder.auto-create-topics=true


# =========================================
# ? Management & Actuator Configuration
# =========================================
# Exposes key operational endpoints:
#  - health:    Basic health status of the Config Server
#  - info:      Build and version info
#  - refresh:   Allows manual refresh of Config Server configuration
#  - busrefresh: Broadcasts refresh events to all connected services via Kafka
management.endpoints.web.exposure.include=busrefresh,refresh,health,info

# Shows detailed health indicators (e.g., Git, Kafka connection health).
management.endpoint.health.show-details=always


# =========================================
# ? Distributed Tracing (OpenTelemetry)
# =========================================
# Probability for tracing sampling: 1.0 means every request will be traced (useful for development and testing).
management.tracing.sampling.probability=1.0

# URL of the OpenTelemetry collector endpoint.
# The Config Server sends trace data (e.g., configuration fetches and bus refresh events)
# to this OTLP collector for visualization in tools like Grafana or Jaeger.
management.otlp.tracing.endpoint=http://192.168.0.190:4318/v1/traces
