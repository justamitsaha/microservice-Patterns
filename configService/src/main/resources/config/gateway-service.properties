# =========================================
# ?? Service Identity
# =========================================
# Logical service name used by:
#   - Eureka for service discovery registration
#   - Config Server to fetch this service?s configuration
#   - Spring Cloud Bus for targeted refresh events
spring.application.name=gateway-service


# =========================================
# ? Spring Cloud Gateway Configuration
# =========================================
# Disable automatic discovery-based route registration. This means routes must be explicitly defined in code or config.
spring.cloud.gateway.server.webflux.discovery.locator.enabled=false

# Forces all service IDs (used in lb:// URIs) to lowercase.
# Helps avoid case sensitivity issues when resolving services from Eureka.
spring.cloud.gateway.server.webflux.discovery.locator.lower-case-service-id=true

# =========================================
# ? Redis Configuration (for Rate Limiting & Caching)
# =========================================
# Hostname of the Redis server.
# Uses the environment variable SPRING_DATA_REDIS_HOST if defined,
# otherwise defaults to local IP 192.168.0.143.
spring.data.redis.host=${SPRING_DATA_REDIS_HOST:192.168.0.143}

# Redis port (default 6379).
# Used by the Gateway for distributed rate limiting and caching.
spring.data.redis.port=6379


# =========================================
# ? Kafka Observability (Micrometer Integration)
# =========================================
# Enables Micrometer to expose Kafka client metrics via Actuator endpoints.
# This is separate from Spring Cloud Bus messaging itself.
# Useful for monitoring producer/consumer latency, lag, and record throughput.
management.kafka.bootstrap-servers=192.168.0.143:9092,192.168.0.143:9093,192.168.0.143:9094

# =========================================
# ?? Actuator & Management Endpoints
# =========================================
# Exposes key endpoints for:
#   - health:      Application health
#   - info:        Build/version info
#   - metrics:     System performance metrics
#   - prometheus:  Prometheus scrape endpoint for Grafana dashboards
#   - refresh:     Manual refresh of configuration
#   - busrefresh:  Broadcast refresh events via Spring Cloud Bus
management.endpoints.web.exposure.include=health,info,metrics,prometheus,refresh,busrefresh

# =========================================
# ? Distributed Tracing (OpenTelemetry)
# =========================================
# Probability of sampling traces.
# Set to 1.0 for full tracing in development; reduce in production (e.g., 0.1).
management.tracing.sampling.probability=1.0

# Endpoint for the OpenTelemetry Collector (OTLP)
# which receives and forwards trace spans to observability backends
# such as Grafana Tempo, Jaeger, or OpenSearch.
management.otlp.tracing.endpoint=http://192.168.0.143:4318/v1/traces


# =========================================
# ? Logging Configuration
# =========================================
# Sets the logging level for Spring Cloud Gateway internals.
# Use INFO for production and DEBUG for detailed routing analysis.
logging.level.org.springframework.cloud.gateway=INFO

# =========================================
# ? Global CORS Configuration (Spring Cloud Gateway 2025.x)
# =========================================
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowed-origins=http://localhost:4200
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allow-credentials=true

