# =========================================
# ?? Basic Application Settings
# =========================================
# Logical service name used by:
#   - Eureka (for registration and discovery)
#   - Config Server (to fetch this configuration)
#   - Spring Cloud Bus (for targeted refresh events)
spring.application.name=customer-service

# Local port on which this service runs.
# In containerized environments, this can be overridden via environment variables.
server.port=8081

# =========================================
# ?? Database (R2DBC + MySQL)
# =========================================
# Reactive (non-blocking) database connection for MySQL.
# Replace credentials or database name based on your environment.
spring.r2dbc.url=r2dbc:mysql://localhost:3306/amit?serverTimezone=Asia/Kolkata
spring.r2dbc.username=root
spring.r2dbc.password=shamit2020


# =========================================
# ? Service-to-Service URLs
# =========================================
# Base URL for the Order service.
# Uses the Eureka discovery service name ("order-service") instead of a hardcoded host/port.
app.order-service.base-url=http://order-service


# =========================================
# ? Management, Metrics & Observability
# =========================================
# Exposes key Actuator endpoints for operational monitoring.
# Includes /busrefresh to allow distributed refresh via Spring Cloud Bus.
management.endpoints.web.exposure.include=health,info,metrics,prometheus,refresh,busrefresh
# Configures percentile and Service Level Objective (SLO) tracking for HTTP requests.
management.metrics.distribution.percentiles.http.server.requests=0.5,0.9,0.95,0.99
management.metrics.distribution.slo.http.server.requests=100ms,250ms,500ms,1s,2s
# === Distributed Tracing (OpenTelemetry) ===
# Sampling probability of traces ? 1.0 means every request is traced. Lower this (e.g., 0.1) in production to reduce overhead.
management.tracing.sampling.probability=1.0
# Endpoint of the OpenTelemetry Collector that receives trace data.
# Used for Grafana Tempo, Jaeger, or OpenSearch tracing.
#management.otlp.tracing.endpoint=http://192.168.0.190:4318/v1/traces
management.tracing.export.otlp.endpoint=http://192.168.0.143:4318/v1/traces



# === Kafka Configuration (for Spring Cloud Bus) ===
# Kafka cluster brokers used by Spring Cloud Bus to propagate configuration updates.
spring.kafka.bootstrap-servers=192.168.0.143:9092,192.168.0.143:9093,192.168.0.143:9094


# =========================================
# ?? Resilience4j Configuration
# =========================================
# Provides circuit breaking, retries, bulkheads, and time limiters
# for reactive and fault-tolerant service-to-service calls.


# --- Circuit Breaker ---
# Tracks failures and temporarily halts calls to unstable services.
resilience4j.circuitbreaker.instances.orderService.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.orderService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.orderService.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.orderService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.orderService.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.orderService.automaticTransitionFromOpenToHalfOpenEnabled=true
# Defines which exceptions are considered failures.
resilience4j.circuitbreaker.instances.orderService.recordExceptions=java.util.concurrent.TimeoutException,org.springframework.web.reactive.function.client.WebClientRequestException,org.springframework.web.reactive.function.client.WebClientResponseException


# --- Retry ---
# Retries failed calls before letting the circuit breaker handle them.
resilience4j.retry.instances.orderService.maxAttempts=3
resilience4j.retry.instances.orderService.waitDuration=200ms
# Defines retryable exceptions.
resilience4j.retry.instances.orderService.retryExceptions=java.util.concurrent.TimeoutException,org.springframework.web.reactive.function.client.WebClientRequestException,org.springframework.web.reactive.function.client.WebClientResponseException


# --- Bulkhead ---
# Limits the number of concurrent calls to avoid resource exhaustion.
resilience4j.bulkhead.instances.orderService.maxConcurrentCalls=20
resilience4j.bulkhead.instances.orderService.maxWaitDuration=200ms


# --- Time Limiter ---
# Configures maximum allowed call duration.
# The logic is implemented in code via Reactor's `.timeout()`,
# but configuration here ensures consistent metrics & monitoring.
resilience4j.timelimiter.instances.orderService.timeoutDuration=2s
resilience4j.timelimiter.instances.orderService.cancelRunningFuture=false


# =========================================
# ? Eureka Discovery Configuration
# =========================================
# Registers this service with the Eureka Discovery Server.
# Other microservices (like gateway-service) can discover it by name.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Ensures the service registers using its IP address rather than hostname.
eureka.instance.prefer-ip-address=true