# =========================================
# ? Eureka Server Configuration
# =========================================
# This service acts as a Eureka Server (not a client),it should not attempt to register itself with Eureka instance.
eureka.client.register-with-eureka=false
# Similarly, it should not try to fetch the registry since it maintains its own service registry.
eureka.client.fetch-registry=false

# Wait time (in milliseconds) before syncing registry data when the Eureka server starts and finds an empty registry.
# Setting this to 0 means "do not wait" ? start immediately.
eureka.server.wait-time-in-ms-when-sync-empty=0


# =========================================
# ?? Actuator & Management Endpoints
# =========================================
# Exposes key endpoints for:
#   - health:      Application health
#   - info:        Build/version info
#   - metrics:     System performance metrics
#   - prometheus:  Prometheus scrape endpoint for Grafana dashboards
#   - refresh:     Manual refresh of configuration
#   - busrefresh:  Broadcast refresh events via Spring Cloud Bus
management.endpoints.web.exposure.include=health,info,metrics,prometheus,refresh,busrefresh

# =========================================
# ? Distributed Tracing (OpenTelemetry)
# =========================================
# Defines the tracing sample probability ? 1.0 means trace every request.
# You can reduce this (e.g., to 0.1) in production for lower overhead.
management.tracing.sampling.probability=1.0

# OTLP (OpenTelemetry Protocol) endpoint to send distributed tracing data.
# The collector (e.g., OpenTelemetry Collector or Grafana Agent)
# listens on port 4318 to receive these trace spans.
management.otlp.tracing.endpoint=http://192.168.0.143:4318/v1/traces



