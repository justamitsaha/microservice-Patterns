################################################
## ? SPRING BOOT APPLICATION CONFIGURATION
################################################
## Application name (used in logs, service discovery, etc.)
#spring.application.name=order-service

###############################################
# ?? DATABASE (R2DBC + MySQL) Reactive MySQL connection URL (note: R2DBC uses a reactive driver, not JDBC)
###############################################
spring.r2dbc.url=r2dbc:mysql://localhost:3306/amit?serverTimezone=Asia/Kolkata
spring.r2dbc.username=root
spring.r2dbc.password=shamit2020


###############################################
# ? KAFKA CONFIGURATION
###############################################
# Kafka cluster bootstrap servers (comma-separated list of brokers)
spring.kafka.bootstrap-servers=192.168.0.143:9092,192.168.0.143:9093,192.168.0.143:9094
# Kafka topics for different purposes
# Main topic for order events
app.kafka.topic.order=order.events
# Dead Letter Topic for failed messages
app.kafka.topic.order.dlt=order.events.dlt
# Retry topic for transient failures
app.kafka.topic.order.retry=order.events.retry
# Topic for Protobuf-encoded events
app.kafka.topic.order.proto=order.events.proto
# Kafka message publishing retry settings
# Maximum retry attempts before sending to DLT
app.kafka.retry.max-attempts=3
# Outbox pattern configurations
# Polling interval for outbox processing (ISO-8601 duration)
app.kafka.outbox.poll-interval=PT1S
# Number of events processed per batch
app.kafka.outbox.batch-size=50
# Max attempts for sending messages from outbox
app.kafka.outbox.max-attempts=5
# Schema Registry (used when Avro/Protobuf serialization is enabled)
app.kafka.schema-registry-url=http://192.168.0.143:8081


###############################################
# ? SWAGGER / OPENAPI # Custom path for Swagger UI
###############################################
springdoc.swagger-ui.path=/swagger-ui/index.html


###############################################
# ? ACTUATOR & OBSERVABILITY
###############################################
# Expose selected actuator endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus,refresh,busrefresh
# OpenTelemetry tracing configuration  # Always sample (100% traces)
management.tracing.sampling.probability=1.0           
# OTLP trace collector endpoint
#management.otlp.tracing.endpoint=http://192.168.0.190:4318/v1/traces
management.tracing.export.otlp.endpoint=http://192.168.0.143:4318/v1/traces

# HTTP request metrics distributions and Service Level Objectives (SLO)
management.metrics.distribution.percentiles.http.server.requests=0.5,0.9,0.95,0.99
management.metrics.distribution.slo.http.server.requests=100ms,250ms,500ms,1s,2s


###############################################
# ? EUREKA CLIENT (SERVICE DISCOVERY)
###############################################
# Eureka server registration endpoint
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# Use IP address instead of hostname when registering with Eureka
eureka.instance.prefer-ip-address=true


###############################################
# ? LOGGING CONFIGURATION
###############################################
# Custom log pattern for console output
logging.pattern.console=${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%class.%M:%L) - %msg%n}
# Log levels for various packages
logging.level.root=INFO
logging.level.org.springframework.boot=INFO
logging.level.org.springframework.cloud=WARN
logging.level.org.apache.kafka=WARN
logging.level.org.springframework.integration=WARN
logging.level.io.opentelemetry=ERROR

order.discount=10
order.use-protobuf=false