# =========================================
# ?? Core Server & Application Info
# =========================================
# Logical name of application. Other microservices will use this name to fetch configuration files from Config Server.
spring.application.name=config-service
# Port on which the Config Server will run. Keep this here so the server can start even before fetching any remote config.
server.port=8888

# =========================================
# ? Git Configuration Repository
# =========================================
# The remote Git repository that stores all configuration files for microservices.
# Each service (e.g., gateway-service, discovery-service) will have its own .properties or .yml file there.
# This must stay local ? the Config Server cannot fetch its own repo details from itself.
spring.cloud.config.server.git.uri=https://github.com/justamitsaha/configurationServer.git

# Clone the Git repository when the Config Server starts up.
spring.cloud.config.server.git.clone-on-start=true

# Git branch to use for fetching configurations. "main" is the default branch of your Git repo.
spring.cloud.config.server.git.default-label=main

# =========================================
# ?? Local Fallback Profile (Native Mode)
# =========================================
# Activate the 'native' profile to allow reading configs directly from the classpath when Git is not available.
# Useful during local development or when offline.
spring.profiles.active=native

# Directory to look for local config files when using native profile.This enables fallback if Git repo access fails.
spring.cloud.config.server.native.searchLocations=classpath:/config

# =========================================
# ? Optional: Refreshing Config Server Environment (via Spring Cloud Bus)
# =========================================
# You can trigger runtime configuration refresh for all connected services using:
#   POST http://localhost:8888/actuator/busrefresh
# This requires Kafka and spring-cloud-bus to be configured (kept in the remote config repo).

